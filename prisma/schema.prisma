// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for storing user profile information
model User {
  id            String   @id
  name          String?
  email         String?
  avatarUrl     String?
  phone         String?
  timezone      String?  @default("UTC")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  teams         TeamMember[]
  sentInvitations TeamInvitation[] @relation("InvitedBy")
  onCallShifts  OnCallShift[]
  incidents     Incident[]
  settings      UserSettings?
  apiKeys       ApiKey[]
  integrations  Integration[]
  assignments   Assignment[]
  
  // New relations
  assignedIncidents Incident[] @relation("AssignedIncidents")
  acknowledgedIncidents Incident[] @relation("AcknowledgedIncidents")
  incidentUpdates IncidentUpdate[]
  notificationLogs NotificationLog[]
  acknowledgments IncidentAcknowledgment[]
}

// UserSettings model for storing notification preferences
model UserSettings {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  emailNotifications       Boolean  @default(true)
  smsNotifications         Boolean  @default(true)
  slackNotifications       Boolean  @default(false)
  voiceNotifications       Boolean  @default(false)
  incidentAssignmentChannel String   @default("all") // all, email, sms, none
  scheduleChangeChannel     String   @default("email") // all, email, sms, none
  escalationChannel         String   @default("all") // all, email, sms, none
  webhookUrl                String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  // Relations
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ApiKey model for API access
model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  key         String   @unique
  lastUsed    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  revoked     Boolean  @default(false)
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Integration model for third-party services
model Integration {
  id            String   @id @default(cuid())
  userId        String
  service       String   // slack, teams, twilio, pagerduty
  configuration Json     // Store connection details as JSON
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, service])
}

// Team model for organizations and groups
model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members     TeamMember[]
  invitations TeamInvitation[]
  onCallShifts OnCallShift[]
  incidents   Incident[]
  schedules   Schedule[]
  
  // New relations
  services    Service[]
  escalationPolicies EscalationPolicy[]
}

// TeamMember junction table for many-to-many relation
model TeamMember {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  role      String   @default("member") // e.g. "admin", "member"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
}

// TeamInvitation model for inviting users to teams
model TeamInvitation {
  id            String   @id @default(cuid())
  email         String
  teamId        String
  invitedById   String
  role          String   @default("member")
  token         String   @unique
  status        String   @default("pending") // pending, accepted, expired
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  team          Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  invitedBy     User     @relation("InvitedBy", fields: [invitedById], references: [id])
}

// OnCallShift model
model OnCallShift {
  id         String   @id @default(cuid())
  userId     String
  teamId     String
  startTime  DateTime
  endTime    DateTime
  isActive   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user       User     @relation(fields: [userId], references: [id])
  team       Team     @relation(fields: [teamId], references: [id])
}

// Incident model
model Incident {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("open") // e.g. "open", "acknowledged", "resolved"
  severity    String?  // e.g. "critical", "high", "medium", "low"
  createdById String
  teamId      String
  assigneeId  String?
  serviceId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resolvedAt  DateTime?
  acknowledgedAt DateTime?
  acknowledgedById String?

  // Relations
  createdBy   User     @relation(fields: [createdById], references: [id])
  team        Team     @relation(fields: [teamId], references: [id])
  assignee    User?    @relation("AssignedIncidents", fields: [assigneeId], references: [id])
  acknowledgedBy User? @relation("AcknowledgedIncidents", fields: [acknowledgedById], references: [id])
  service     Service? @relation(fields: [serviceId], references: [id])
  escalations EscalationLog[]
  updates     IncidentUpdate[]
  notifications NotificationLog[]
  acknowledgments IncidentAcknowledgment[]
}

// Schedule model for on-call rotations
model Schedule {
  id                String      @id @default(cuid())
  name              String
  description       String?
  rotationFrequency Int         @default(1)
  rotationUnit      String      @default("weekly") // daily, weekly, biweekly, monthly
  startDate         DateTime
  endDate           DateTime?
  timezone          String      @default("UTC")
  teamId            String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  team              Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  assignments       Assignment[]
}

// Assignment model for individual on-call assignments
model Assignment {
  id          String      @id @default(cuid())
  scheduleId  String
  userId      String
  date        DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  schedule    Schedule    @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([scheduleId, date])
}

// New models for incident logging functionality

// Service model for different services that can trigger incidents
model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  teamId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  incidents   Incident[]
}

// EscalationPolicy model
model EscalationPolicy {
  id          String   @id @default(cuid())
  name        String
  description String?
  teamId      String
  steps       Json     // Array of escalation steps with timing and targets
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

// IncidentUpdate model for tracking status changes and comments
model IncidentUpdate {
  id          String   @id @default(cuid())
  incidentId  String
  userId      String
  message     String
  type        String   // STATUS_CHANGE, COMMENT, ASSIGNMENT_CHANGE, etc.
  createdAt   DateTime @default(now())

  // Relations
  incident    Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
}

// NotificationLog model for tracking notifications sent
model NotificationLog {
  id          String   @id @default(cuid())
  incidentId  String
  userId      String
  channel     String   // email, sms, slack, voice
  status      String   // sent, delivered, failed
  errorMessage String?
  sentAt      DateTime @default(now())
  deliveredAt DateTime?

  // Relations
  incident    Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
}

// EscalationLog model for tracking escalation events
model EscalationLog {
  id          String   @id @default(cuid())
  incidentId  String
  level       Int
  triggeredAt DateTime @default(now())
  targetId    String   // User or team that was notified
  targetType  String   // USER or TEAM
  status      String   // triggered, acknowledged, resolved

  // Relations
  incident    Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
}

// IncidentAcknowledgment model for tracking acknowledgments
model IncidentAcknowledgment {
  id          String   @id @default(cuid())
  incidentId  String
  userId      String
  channel     String   // web, slack, sms, voice
  acknowledgedAt DateTime @default(now())
  
  // Relations
  incident    Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
}
